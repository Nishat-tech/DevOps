# Stage 1: Build the React application
# Hum Node.js ka latest Long Term Support (LTS) version istemal kar rahe hain.
FROM node:18-alpine AS build

# Container ke andar working directory set karen
WORKDIR /app

# package.json aur package-lock.json files ko copy karen
# Yeh dependencies ko pehle install karne ke liye hai, taake caching theek se kaam kare.
COPY package.json ./
COPY package-lock.json ./

# Node.js dependencies install karen
# --force ka istemal sirf tab karen jab aapko dependency resolution issues aa rahe hon.
# Warna sirf `npm install` istemal karen.
RUN npm install

# Baaqi saare application code ko copy karen
COPY . .

# React application ko production ke liye build karen
# Yeh command aapke React code ko static HTML, CSS, aur JS files mein compile karegi.
RUN npm run build

# Stage 2: Serve the built application with Nginx
# Hum ek lightweight Nginx image istemal kar rahe hain static files serve karne ke liye.
FROM nginx:alpine

# Nginx ke default configuration file ko replace karen (optional, lekin behtar control ke liye)
# Yeh example default.conf aapko apne project folder mein banani padegi agar aap customize karna chahen.
# COPY nginx/default.conf /etc/nginx/conf.d/default.conf

# Pehle stage se build kiye gaye static files ko Nginx ke default public directory mein copy karen
COPY --from=build /app/build /usr/share/nginx/html

# Nginx ko port 80 par chalane ke liye expose karen
EXPOSE 80

# Nginx web server ko shuru karne ki command
CMD ["nginx", "-g", "daemon off;"]
